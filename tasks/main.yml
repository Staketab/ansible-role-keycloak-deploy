---
- name: Ensure '{{ deployment_workdir }}' exists
  ansible.builtin.file:
    path: "{{ deployment_workdir }}"
    state: directory
    mode: '0755'
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Install and upgrade pip
  ansible.builtin.pip:
    name: pip
    extra_args: --upgrade
    executable: pip3
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Ensure python3-pip is installed
  ansible.builtin.apt:
    name: python3-pip
    state: present
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Ensure build dependencies for pip packages are installed
  ansible.builtin.apt:
    name:
      - python3-dev
      - libyaml-dev
      - build-essential
      - libffi-dev
      - libssl-dev
    state: present
    update_cache: yes
  become: yes

- name: Install python3 modules
  ansible.builtin.pip:
    name: "{{ item }}"
    state: forcereinstall
  loop:
    - bottle
  vars:
    ansible_python_interpreter: /usr/bin/python3
  become: yes

- name: Install dxlmispservice with pip3
  ansible.builtin.pip:
    name: dxlmispservice
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Ensure pkg-config is installed
  ansible.builtin.apt:
    name: pkg-config
    state: present
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Install setuptools-rust with pip3
  ansible.builtin.pip:
    name: setuptools-rust
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Install required packages for Docker repository
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Create Docker keyring directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Add Docker's official GPG key
  ansible.builtin.shell: |
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  become: yes
  args:
    creates: /etc/apt/keyrings/docker.gpg
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Add Docker repository
  ansible.builtin.shell: |
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  become: yes
  args:
    creates: /etc/apt/sources.list.d/docker.list
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Install Docker Engine
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
    state: present
    update_cache: yes
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Create Docker plugin directory if it doesn't exist
  ansible.builtin.file:
    path: /usr/local/lib/docker/cli-plugins
    state: directory
    mode: '0755'
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Download Docker Compose V2 plugin
  ansible.builtin.get_url:
    url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
    dest: /usr/local/lib/docker/cli-plugins/docker-compose
    mode: '0755'
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Show ansible_python
  ansible.builtin.debug:
    msg: "{{ ansible_python }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Ensure rsync is installed
  ansible.builtin.apt:
    name: rsync
    state: present
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Copying the Keycloak Directory and its contents
  ansible.posix.synchronize:
    src: "{{ deployment_resources }}"
    dest: "{{ deployment_workdir }}/"
    archive: yes
    compress: yes
    delete: yes
    recursive: yes
    rsync_opts:
      - "--exclude=*.bak"
      - "--exclude=*.tmp"
      - "--exclude=.git"
  become: yes
  become_user: "{{ deployment_user }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Set correct ownership
  ansible.builtin.file:
    path: "{{ deployment_workdir }}"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: '0755'
    recurse: yes
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Transfer a JAR artifact to the remote server
  ansible.builtin.copy:
    src: "{{ deployment_api_jar_src }}"
    dest: "{{ deployment_api_jar_workdir }}/api-backend-0.0.1-SNAPSHOT.jar"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: '0755'
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Transfer a Docker artifact to the remote server
  ansible.builtin.copy:
    src: "{{ deployment_artifact }}"
    dest: "{{ deployment_workdir }}/docker-compose.yml"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: '0755'
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Setup environment variables
  ansible.builtin.template:
    src: env.j2
    dest: "{{ deployment_workdir }}/.env"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: '0640'
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Stop docker-compose
  community.docker.docker_compose_v2:
    project_src: "{{ deployment_workdir }}"
    state: stopped
    files:
      - docker-compose.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Start docker-compose
  community.docker.docker_compose_v2:
    project_src: "{{ deployment_workdir }}"
    state: "present"
    timeout: 600
    remove_orphans: true
    files:
      - docker-compose.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
  register: compose_result
  retries: 3
  delay: 10
  until: compose_result is success

- name: Wait for Keycloak services to be fully up
  ansible.builtin.pause:
    seconds: 30
  when: compose_result is changed
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Check Keycloak container status
  community.docker.docker_container_info:
    name: keycloak
  register: keycloak_info
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Display Keycloak container status
  ansible.builtin.debug:
    var: keycloak_info.container.State
  vars:
    ansible_python_interpreter: /usr/bin/python3
